! 入力 / Input
!Desktop!
>>desktop<<

Unity はキーボード, ジョイスティックおよびゲームパッド入力をサポートします。

バーチャル軸および ボタンは $$Input Manager$$で作成でき, さらにエンドユーザは キーボード 入力 を見やすい画面のコンフィグ ダイアログで設定できます。

Attach:InputSelector.png

ジョイスティック, ゲームパッド, キーボード, およびマウスをセットアップして、それからひとつのスクリプティングインタフェースを通してアクセスできます。

スクリプトから、全てのバーチャル軸はその名前でアクセスできます。

全てのプロジェクトは作成時に、デフォルトの入力軸が次の通りです:
*``Horizontal``および``Vertical`` はw, a, s, d および矢印キーにマッピング
*``Fire1``, ``Fire2``, ``Fire3`` はCtrl, Opt(Alt), Cmd キーにそれぞれマッピング
*``Mouse X``および``Mouse Y`` はマウス動作の動きにマッピング
*``Window Shake X``および``Window Shake Y`` はウィンドウの動作にマッピング


!!! 新規の入力軸の追加

もし新規のバーチャル軸の追加を追加したい場合、 ^^Edit->Project Settings->Input^^ メニューに行きます。ここで各々の軸の設定を変更できます。

Attach:InputAxis.png

各々の軸をジョイスティックの二つのボタン, マウス, またはキーボード のキーにマッピングします。

||PROPS
||``Name`` ||スクリプトからこの軸をチェックする文字列の名前。 ||
||``Descriptive Name`` ||スタンドアローン ビルドで ^^Configuration^^ の Input タブで表示される正の値の名前||
||``Descriptive Negative Name`` ||スタンドアローン ビルドで ^^Configuration^^ の Input タブで表示される負の値の名前  ||
||``Negative Button`` ||負の方向の軸を押すためのボタン。 ||
||``Positive Button`` ||正の方向の軸を押すためのボタン。 ||
||``Alt Negative Button`` ||負の方向の軸を押すための、代わりのボタン。||
||``Alt Positive Button`` ||正の方向の軸を押すための、代わりのボタン。||
||``Gravity`` ||何もボタンが押されてない場合に軸がニュートラルになるための、毎秒単位での速度。||
||``Dead`` ||アナログの Dead Zoneのサイズ。この範囲の全てのアナログデバイスはニュートラルにマッピングされます。||
||``Sensitivity`` ||軸がターゲットの値に向かうための毎秒単位での速度。これはデジタルデバイスのみ向けです。||
||``Snap`` ||もし有効化すると、軸の値は、ボタンを反対方向に押したときに、ゼロにリセットされます。||
||``Invert`` ||もし有効化すると、__Negative Button__ は正の値に反転し、その逆も然りとなります。||
||``Type`` ||軸を制御する入力の種類。||
||``Axis`` ||軸を制御する接続されたデバイスの軸。||
||``Joy Num`` ||軸を制御する接続されたジョイスティック。||

これらの設定を使用して、入力の調整を行います。これらは全てエディタのTooltipでも説明表示がされます。


!!! スクリプトからの入力軸の使用
次のようなスクリプトで現在の状態をクエリできます:

[@value = Input.GetAxis ("Horizontal"); @]

軸は -1 から 1 までの範囲の値をとります。ニュートラル のポジションは 0 です。
これはジョイスティック入力およびキーボード入力の場合です。

しかし、マウスの動作およびウィンドウシェイクの動作は最後のフレームの間にマウスまたはウィンドウが移動した値です。これはつまりマウスをすばやく動かした場合は、値は 1 より大きくなったり -1 より小さくなったります。

複数の軸を同じ名前で作成することが出来ます。入力軸を取得するとき、もっとも絶対値が大きい軸が返されます。これによりひとつ以上の 入力 デバイス を軸の名前に割り当てることが出来ます。例えば、ひとつの軸をキーボード入力として作成して、ひとつの軸をジョイスティック入力として同じ名前で作成します。もしユーザがジョイスティックを使用していれば、入力はジョイスティックから来て、そうでなければキーボードから来ます。これによってどの入力から来ているのかスクリプトを書くときに考慮する必要がありません。

!!!ボタン名

キーを軸にマッピングするとき、キーの名前を$$Inspector$$ の ``Positive Button`` または ``Negative Button`` プロパティに入力する必要があります。

キーの名前は次のルールに従います:
* 通常キー: "a", "b", "c" ...
* 数字キー: "1", "2", "3",  ...
* 矢印キー: "up", "down", "left", "right"
* キーパッド キー: "[1]", "[2]", "[3]", "[+]", "[equals]"
* 修飾キー: "right shift", "left shift", "right ctrl", "left ctrl", "right alt", "left alt", "right cmd", "left cmd"
* マウスボタン: "mouse 0", "mouse 1", "mouse 2", ...
* ジョイスティック Buttons (from any ジョイスティック): "joystick button 0", "joystick button 1", "joystick button 2",  ...
* ジョイスティック Buttons (from a specific ジョイスティック): "joystick 1 button 0", "joystick 1 button 1", "joystick 2 button 0", ...
* 特殊 キー: "backspace", "tab", "return", "escape", "space", "delete", "enter", "insert", "home", "end", "page up", "page down"
* Function キー: "f1", "f2", "f3", ...

キーを識別するために使用される名前はすくスクリプティングインタフェースおよびインスペクタ上で同じです。

[@value = Input.GetKey ("a"); @]
>><<

!モバイル入力
iOS および Android では、[[ScriptRef:Input.html | Input]] クラスによりタッチスクリーン、加速度センター、および位置情報入力にアクセス出来ます。

モバイル デバイス でのキーボードへのアクセスは [[MobileKeyboard#iOS | iOS キーボード]] を通じて提供されます。

!! マルチタッチスクリーン

iPhoneおよびiPod Touch デバイスは五本指が同時に画面をタッチしていることをトラッキングすることが出来ます。最終フレームでの各々の指の画面タッチのステータスをアクセスするには [[ScriptRef:Input-touches.html | Input.touches]] プロパティの配列を使用します。

>>android<<
Android デバイスは何本の指までトラッキングできるか統一された限界値がありません。その代わりに、デバイスごとに異なり、古いデバイスで2つのタッチから、最新デバイスでは5つのタッチに対応します。
>><<

各々の指のタッチは [[ScriptRef:Touch.html | Input.Touch]] データ構造により表現されます:
||PROPS
||``fingerId`` ||タッチの一意のインデックス。
||``position`` ||タッチの画面位置。
||``deltaPosition`` ||最終フレーム以降のタッチの画面位置の差分。
||``deltaTime`` ||最後の状態変更から経過した時間。
||``tapCount`` ||iPhone/iPad 画面はユーザによるクイックな指のタップを識別できます。このカウンタによりユーザが、指を横に動かさずに、何回画面をタップしたか知らせます。%android%Android デバイスはタップの数をカウントせず、この値はつねに 1 です。%%
||``phase`` ||"Phase" と呼ばれるタッチの状態を表現します。これによりタッチが始まったばかりなのか、ユーザが指を移動したのか、もしくは指を上げたところなのかを判断できます。
||END

Phase は次のうちのいずれかの値をとります:
||``Began`` ||指がスクリーンをタッチしたばかりです。
||``Moved`` ||指がスクリーン上で動きました。
||``Stationary`` ||指がスクリーンをタッチしてますが最終フレームから移動してません。
||``Ended`` ||指がスクリーン上から離れました。これはタッチの最終フェーズです。
||``Canceled`` ||システムがタッチのトラッキングをキャンセルしていて、(例えば) ユーザがデバイスを顔全体につけたとおか、同時に5タッチ以上が同時に発生した、等です。これはタッチの最終フェーズです。

次に、ユーザが画面でタップしたときにRaycast するサンプルスクリプトを示します:
[@
var particle : GameObject;
function Update () {
	for (var touch : Touch in Input.touches) {
		if (touch.phase == TouchPhase.Began) {
			// 現在のタッチ位置からRaycast
			var ray = Camera.main.ScreenPointToRay (touch.position);
			if (Physics.Raycast (ray)) {
				// ヒットした場合はパーティクルを作成
				Instantiate (particle, transform.position, transform.rotation);
			}
		}
	}
}
@]

!!! マウスシミュレーション
ネイティブタッチのサポートに加えて、Unity iOS/Android によりマウスシミュレーションが提供されています。マウス機能を標準の [[ScriptRef:Input.html | Input]] クラスから使用できます。

!! 加速度センサー
モバイル デバイスが移動すると、ビルトインの加速度センサーが線形の加速度変更を
3次元空間の3つの主要な軸に沿った変更を検知します。各々の軸の加速
はハードウェアの重力の値により直接に返されます。値が
1.0 の場合は +1 G が特定の軸にかかっていることを示し、値が -1.0
の場合は -1 G を示します。もしデバイスを真っ直ぐに持った場合（ホームボタンが下）
X軸は右向き、Y軸は上向き、Z軸は自分の方向に向かっています。

加速度センターの値を取得するには [[ScriptRef:Input-acceleration.html | Input.acceleration]] プロパティにアクセスします。

次のサンプルにより移動してるオブジェクトが加速度センサーを使用するスクリプトを示します：
[@
var speed = 10.0;
function Update () {
	var dir : Vector3 = Vector3.zero;

	// デバイスが地面に平行と仮定
	// し、ホームボタンが右側

	// デバイスの加速度軸をゲームの座標にあわせて再マッピング:
	//  1) デバイスの XY 平面をXZ平面にマッピング
	//  2) Y軸の周りに90度回転
	dir.x = -Input.acceleration.y;
	dir.z = Input.acceleration.x;

	// 球の単位に加速度ベクトルの値を Clamp
	if (dir.sqrMagnitude > 1)
		dir.Normalize();

	// 10メートル毎秒で移動（1フレームあたりでなく）
	dir *= Time.deltaTime;

	// オブジェクトを移動
	transform.Translate (dir * speed);
}
@]

!!! ローパスフィルタ
加速度センターの入力は不安定でノイズが入ることがあります。ローパスフィルタリングを信号にかけることでスムージングして高周波のノイズを取り除くことが出来ます。

次のスクリプトにより、加速度センターの値にローパスフィルタリングを適用する方法を示します:
[@
var AccelerometerUpdateInterval : float = 1.0 / 60.0;
var LowPassKernelWidthInSeconds : float = 1.0;

private var LowPassFilterFactor : float = AccelerometerUpdateInterval / LowPassKernelWidthInSeconds; // 微調整が可能
private var lowPassValue : Vector3 = Vector3.zero;
function Start () {
	lowPassValue = Input.acceleration;
}

function LowPassFilterAccelerometer() : Vector3 {
	lowPassValue = Mathf.Lerp(lowPassValue, Input.acceleration, LowPassFilterFactor);
	return lowPassValue;
}
@]

@@LowPassKernelWidthInSeconds@@ の値が大きいほどフィルタされた値は現在の入力サンプリングに収束します（逆も然りです）。

!!! 加速度センサーで出来るかぎりの精度がほしいです。どうすれば良いですか？
[[ScriptRef:Input-acceleration.html | Input.acceleration]] の値を読み取ることはハードウェアのサンプリングとは一致しません。簡単にいうと、Unityはハードウェアの60 Hz でサンプリングして、結果を変数に格納します。現実には、状況はより複雑です -- 加速度センサーのサンプリングは、CPU処理負荷が大きい場合など、安定した時間のインターバルで発生しません。結果として、システムは2つのサンプルをあるフレームで報告しますが、次のフレームでは1サンプルのみ報告します。

フレーム中に加速度センサーにより実行された全ての測定値をアクセスすることができます。次のコードにより、最終フレームで全ての加速度センサーで収集されたイベントの単純な平均値を示します:

[@
var period : float = 0.0;
var acc : Vector3 = Vector3.zero;
for (var evnt : iPhoneAccelerationEvent  in iPhoneInput.accelerationEvents) {
	acc += evnt.acceleration * evnt.deltaTime;
	period += evnt.deltaTime;
}
if (period > 0)
	acc *= 1.0/period;
return acc;
@]

!! 上級者向け

Unity モバイル 入力 API はもともと Apple の API に基づいています。ネイティブAPIについて学ぶことで Unity の入力 API についてより良く理解できます。
Apple 入力 API ドキュメントは次の場所で見つけられます:

*[[file:///Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleiPhone2_0.iPhoneLibrary.docset/Contents/Resources/Documents/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/EventHandling/chapter_8_section_1.html | Programming Guide: Event Handling (Apple iPhone SDK documentation)]]
*[[file:///Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleiPhone2_0.iPhoneLibrary.docset/Contents/Resources/Documents/documentation/UIKit/Reference/UITouch_Class/Reference/Reference.html | UITouch Class Reference (Apple iOS SDK documentation)]]

__注意:__ 上記のリンクはローカルにインストールされたiPhone SDK Reference Documentation を参照していて、ネイティブのObjective C コードを含みます。 Unityを モバイル デバイスで視ようする場合にこれらを理解することは必要ありませんが、一部の人には役立つかもしれません。

>>ios<<
!iOS!
[[#iPhoneInput]]

!! デバイス 位置情報
デバイス 位置情報は [[ScriptRef:iPhoneInput-lastLocation.html|iPhoneInput.lastLocation]] プロパティを通じて取得できます。このプロパティをコールする前に [[ScriptRef:iPhoneSettings.StartLocationServiceUpdates.html|iPhoneSettings.StartLocationServiceUpdates()]] でLocation Service updates を起動してサービスのステータスを [[ScriptRef:iPhoneSettings-locationServiceStatus.html|iPhoneSettings.locationServiceStatus]] で確認すべきです。詳細については[[ScriptRef:iPhoneSettings.StartLocationServiceUpdates.html|scripting reference]] を参照下さい。
>><<

>>ios<<
(:include iOS.Joysticks:)
>><<
>>wiiu<<
!WiiU
[[#wiiuInput]]

!! ジョイスティックのエイリアスと Axes

WiiU 上ではひとつの顧客仕様の定義と、複数の事前定義されたジョイスティックがあり、エディタの Input Manager の Axes にアタッチできます。

!!! ジョイスティック / Joystick

これらのバーチャル ジョイスティックは、Axes のひとつに 'Type', 'Axis' および 'JoyNum' をセットすることで、エディタの Input Manager で使用することが出来ます。

!!!! ジョイスティック 1 / Joystick 1

このジョイスティックはデフォルトにおいてチャネル 1 のWiiU コントローラに対応しますが、同様にジョイスティックとして機能する、スクリプトのプロパティ 'WiiUInput.mouseController' により動的にセットすることが出来ます。
WiiU コントローラに接続した、外部コントローラにあたるヌンチャクのアナログスティックは 'Joystick 1' の X 軸および Y 軸にマッピングされます。

!!!! ジョイスティック 2 / Joystick 2

このジョイスティックはゲームパッドコントローラと連動します。
コントローラのボタンは次のとおりにジョイスティックのボタンに対応しています：
||``1``||'B' ボタン||
||``2``||'A' ボタン||
||``3``||'Y' ボタン||
||``4``||'X' ボタン||
||``5``||'ZL' ボタン||
||``6``||'ZR' ボタン||
||``7``||'-' ボタン||
||``8``||'+' ボタン||
||``9``||ゲームパッドの'左'||
||``10``||ゲームパッドの'右'||
||``11``||ゲームパッドの'下'||
||``12``||ゲームパッドの'上'||
||``13``||'L' ボタン||
||``14``||'R' ボタン||
||``15``||左のスティック ボタン||
||``16``||右のスティック ボタン||

コントローラの左および右のアナログスティックは最初の 4 つのジョイスティック Axes にマッピングされます。

||``axis 1 aka X``||左スティックの水平方向の動作。||
||``axis 2 aka Y``||左スティックの垂直方向の動作。||
||``axis 3``||右スティックのの水平方向の動作。||
||``axis 4``||右スティックの垂直方向の動作。||

!!!! ジョイスティック 3 とそれ以降 / Joystick 3 and subsequent

全ての接続された WiiU PRO コントローラはジョイスティックとして追加されます。最初に接続された PRO コントローラが "Joystick 3" に対応します。
ジョイスティックのボタンおよび Axes はデバイスのボタンおよびスティックはゲームパッドコントローラと全く同様にマッピングされます。


!!!Axes

これらのシンボル名は Input Manager の 'Negative Button', 'Postivite Button', 'Alt Negative Button' または 'Alt Positive Button' から直接使用できます。
'WiiUInput.mouseController' を通してセットしたリモートコントローラのボタンは次のシンボル名を通じてアクセスできます。

||``SDLK_UP``||ゲームパッドの'上' ボタン||
||``SDLK_DOWN``||ゲームパッドの'下' ボタン||
||``SDLK_LEFT``||ゲームパッドの'左' ボタン||
||``SDLK_RIGHT``||ゲームパッドの'右' ボタン||
||``SDLK_LCTRL``||'A' ボタン||
||``SDLK_SPACE``||'B' ボタン||
||``SDLK_LALT``||'1' ボタン||
||``SDLK_LCTRL``||'2' ボタン||
||``SDLK_LMETA``||'2' ボタン||
||``SDLK_a``||'A' ボタン||
||``SDLK_b``||'B' ボタン||
||``SDLK_PLUS``||'+' ボタン||
||``SDLK_MINUS``||'-' ボタン||
||``SDLK_ボタン_1``||'1' ボタン||
||``SDLK_ボタン_2``||'2' ボタン||

さらに、接続されたヌンチャク外部コントローラのボタンは次のシンボル名がアサインされています。

||``SDLK_z``||'Z' ボタン||
||``SDLK_c``||'C' ボタン||
||``SDLK_RSHIFT``||'Z' ボタン||
||``SDLK_LSHIFT``||'C' ボタン||
