! iOS 特有の最適化 / iOS Specific Optimizations

このページではiOSデプロイに特有の最適化を説明します。モバイルデバイス向けの最適化については [[Main.iphone-PracticalGuide | Practical Guide to Optimization for Mobiles]] を参照下さい。

!! スクリプト コール最適化
$$UnityEngine$$ 名前空間のほんどの関数はC/C++で実装されています。C/C++関数をMonoスクリプトからコールすることはパフォーマンス オーバーヘッドを伴います。iOS スクリプト コール最適化 (メニュー: ^^Edit->Project Settings->Player^^) を使用して毎フレーム1から4ミリ秒の節約が出来ます。この設定のオプションは:-
* __Slow and Safe__ - Monoのデフォルトであり、例外処理に対応した内部コール ハンドリング。
* __Fast and Exceptions Unsupported__ - Mono 内部コール ハンドリングのより速い実装です。例外処理はサポートされてないため使用は注意が必要です。例外を明示的にハンドリングしないアプリ (また、体よく対応がそもそも必要ない) はこのオプションが理想的です。

!! 希望のフレームレートをセット
Unity iOSによりアプリケーションがレンダリングループを実行する周波数を変更することが出来て、デフォルトでは30フレーム毎秒です。バッテリー消費を節約するためにこの数字を下げることは出来ますが、この節約は当然にフレーム更新が犠牲になります。反対にフレームレートを増やして、タッチ入力および加速度センサー処理といった、他の活動よりもレンダリングの優先度をあげることが出来ます。フレームレートを調整して実際のゲームプレイへの影響を判断する必要があります。

もしアプリケーションが重たい処理やレンダリングを伴い、例えば15フレーム毎秒しか維持出来ない場合、希望のフレームレートを15以上に設定したからといってパフォーマンスは上がりません。アプリケーションは十分に最適化しないと高いフレームレートは得られません。

希望するフレームレートをセットするには [[ScriptRef:Application-targetFrameRate.html | Application.targetFrameRate]] を変更します。

!! 加速度センサーの周波数のチューニングTuning Accelerometer Processing Frequency
もし加速度センサー入力があまりに頻繁に処理される場合ゲーム全体のパフォーマンスが結果的に影響を受けるかもしれません。デフォルトでは、Unity iOSアプリケーションは加速度センサーを60回毎秒サンプリングを行います。加速度センサーのサンプリング周波数を下げるとこでパフォーマンス 改善がみられるかもしれず、加速度センサーを使用しないゲームではゼロに、設定することさえも出来ます。加速度センサーの周波数を変更するには [[class-PlayerSettings40|iOS Player Settings]] の``Other Settings`` から変更します。
