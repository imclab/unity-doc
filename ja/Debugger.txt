! デバッガ / Debugger

Unity デバッガにより、ランタイム時にコードを検査できます。 例えば、関数を呼び出すタイミングやどの値と呼び出すかを決定するのに便利です。 また、ゲーム実行中の所定の時間にスクリプトの変数値を確認できます。 段階的にスクリプトを実行することで、スクリプト内のバグやロジックの問題を突き止めることができます。

Unity は、MonoDevelop IDE を使用して、ゲーム内のスクリプトをデバッグします。 エンジンがサポートしているすべての言語をデバッグできます。 (JavaScript、C# および Boo)。

デバッガは、すべてのコードとすべてのシンボルをロードする必要があるため、実行中にゲームのパフォーマンスに若干の影響を及ぼす場合があります。  通常、このオーバーヘッドはゲームのフレーム レートに影響するほど大きいものではありません。
[[<<]]
[[<<]]
Attach:DebuggerWindow.png[[<<]]
''Unity のスクリプトをデバッグする MonoDevelop ウィンドウ''
[[<<]]
[[<<]]
[[<<]]
!! Unity でのデバッギング
Windows では、ユーザーは、Unity のインストールの一部として、MonoDevelop をインストールするよう選択する必要があります (デフォルトで選択)。

* 以前にプロジェクトで MonoDevelop を使用していない場合、MonoDevelop プロジェクトを同期させます。 これにより、MonoDevelo 内のプロジェクトが開きます。
      Attach:MonoDevelopSync.png
[[<<]]
[[<<]]
* 分析したい行をクリックすることで、スクリプト上に必要なブレーク ポイントを設定します。
      Attach:MonoDevelopSetBreakPoints.png
[[<<]]
[[<<]]

* Unity またはプレイヤーを起動します。
** Unity: 設定ウィンドウで''Editor Attaching''にチェックを入れます。
** プレイヤー: ''Development build''および''Allow script debugging''オプションを有効にして、プレイヤーが作成されていることを確認してください。For webplayers, additionally check that the development release channel setting is enabled on the player's context menu (right click on Windows or cmd-click on Mac OSX)

Attach:WebContextMenuDebug.png\\
''Enabling debugging in the webplayer''

* MonoDevelop でプロジェクトを開きます。
* MonoDevelop で、ツールバーの [追加] ボタンをクリックするか、__実行__メニューから__追加__を選択します。
* 表示されるダイアログから、デバッグしたい項目を選択します。
* __注意:__
** 以下の対象が現在サポートされています。 Unityエディタ、デスクトップ スタンドアロン プレイヤー、Android および iOS プレイヤー
** バックグラウンドでプレイヤーを実行するよう設定しない場合は (デフォルト)、リスト内でプレイヤーを表示させるためには、プレイヤーにフォーカスを数秒合わせる必要がある場合があります。
** スクリプト のデバッギングを有効にした場合、Android および iOS プレイヤーで、ネットワーキングを有効にする必要があります。 すべてのプレイヤーは、MonoDevelop を実行しているコンピュータと同じネットワーク サブネット上にある必要があります。

[[<<]]
      Attach:MonoDevelopAttach.png
[[<<]]
[[<<]]


[[<<]]
[[<<]]
** 再生モードに入ると、スクリプト コードがデバッガで実行されます。
** ブレークポイントが発生すると、スクリプトの実行が停止し、MonoDevelop を使用して、スクリプトのステップ オーバー、ステップ イン、ステップ アウト、変数の検査、呼び出しスタックの試験を行うことができます。
*** ''注意：'' トップ レベルのメソッド (@@Update()@@ など) のデバッグを終了した場合、または次のブレークポイントに移りたい場合、関数の最後をステップ アウトまたはステップ オーバーする代わりに、__Continue__コマンドを使用することで、パフォーマンスが改善します。
      Attach:MonoDevelopUnityDebugging.png
      Attach:MonoDevelopDebugView.png
[[<<]]
[[<<]]

* デバッグ終了時に、ツールバーの [解除] または [停止] ボタンをクリックするか、__実行__メニューから__解除__または__停止__を選択します。

!! ヒント
* Iウォッチを__''この''__ オブジェクトに追加する場合、スクリプトを追加するゲーム オブジェクトの内部値 (位置、スケール、回転) を検査できます。
[[<<]]
[[<<]]
>>ios<<
!! iOS リモート デバッギングに関する指示
前述の指示に加え、Unity iOS アプリケーションで、デバッグをうまく行うには、更に必要な手順があります。
# WiFi ネットワークに iDevice を追加します (リモート プロファイリングの場合と同じ要件)。 
# Unity エディタで''作成''と''実行''を押します。 
# Xcode を介して、アプリケーションを作成、インストールおよび起動する場合、Xcode の''停止''をクリックします。 
# iDevice でアプリケーションを手動で検索、起動します。 (__注意:__ アプリケーションを Xcode を介して実行する場合は、ブレークポイントに達した後は再開できません)。
# アプリケーションを機器で実行している場合、MonoDevelop に切り替え、デバッギング ツールバーの追加アイコンをクリックします。 使用できるインスタンス リストから機器を選択します (複数のインスタンスが表示されている場合、一番下のインスタンスを選択します)。
[[<<]]


