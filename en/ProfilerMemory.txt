! Memory Area

There are two modes in which you can inspect memory usage of your application. This is selected in the dropdown in the top of the bottom panel.

!!Simple View
The simple mode shows how memory is used through out unity on a higher level in realtime on a per frame basis.

Attach:ProfilerMemorySimple.png

Unity reserves memory pools for allocations in order to avoid asking the os for memory too often. This is displayed as a reserved amount and how much is used.
The areas covered by this is:
* __Unity__ The amount of memory tracked by allocations in native unity code
* __Mono__ The Total heap size and used heap size used by Managed Code - this memory is garbagecollected
* __GfxDriver__ The estimated amount of memory the driver is using on Textures, Rendertargets, shaders and Meshdata
* __FMOD__ The Audio drivers estimated memory usage
* __Profiler__ Memory used for the profilerdata
The numbers that are displayed are not going to show the same amount as the Task Manager or Activity Monitor, because there are some usage that is untracked by the memory profiler. This includes memory used by some drivers and memory used for Executable code.

Memory stats are shown for some of the most common asset/object types and include the count and the used memory (main and video memory)
* __Textures__
* __Meshes__
* __Materials__
* __Animations__
* __Audio__
* __Object Count__ is the total number of Objects that are created. If this number rises over time then it means your game is creating some objects that are never destroyed.

!! Detailed View
The Detailed View, will let you take a snapshot of the current state. Use the "Take Sample" button to capture detailed memory usage. Obtaining this data takes some time, so the Detailed View should not be expected to give you real-time details.  After taking a sample the profiler window will be updated with a treeview where you can explored different memory usage.

Attach:ProfilerMemoryDetailed.png


This will display individual asset and game object memory usage. It will also display a reason for an object to be in memory. The reasons can be of the following:
* __Referenced from native code__
* __Scene object__
* __Built-in Resources__
* __Marked as don't save__

When in the editor, clicking on an object in the list, will take you to the object in either the project or the scene view.

When profiling in the editor, all numbers displayed by the memory profiler are the usage by the editor. These will be somewhat larger than when running in a player, because of editor overhead. For more precise numbers and memory usage for your app, use the profiler connection to connect to the running player. This will give the actual usage on the device.

